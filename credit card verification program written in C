#include <stdio.h>
#include <cs50.h>

//    Card_Name is one of:                                      // Interp. name of credit card company
const string C_NAME_AMEX = "AMEX\n";
const string C_NAME_MASTERCARD = "MASTERCARD\n";
const string C_NAME_VISA = "VISA\n";
const string C_NAME_DINERSCLUB = "DINERS\n";
const string C_NAME_DISCOVERCLUB = "DISCOVER\n";
const string C_NAME_JCB = "JCB\n";
const string C_NAME_INVALID = "INVALID\n";                      // means credit card is invalid

//    Card_Length_Standart is one of:                           // Interp. standart length of credit card numbers
const int C_LENGTH_AMEX = 15;
const int C_LENGTH_MASTC_OR_VISA = 16;                          // means length of Mastercard or Visa, used to check length
const int C_LENGTH_VISA = 13;
const int C_LENGTH_DINERSCLUB = 14;
const int C_LENGTH_DISCOVERCLUB = 16;
const int C_LENGTH_JCB = 16;

//    First_2_Digits_Standart is one of:                        // Interp. standart combinations of first two digits of card number
// FIRST_2_AMEX          34 || 37;
// FIRST_2_MASTERCARD    [51, 55];
// FIRST_2_VISA          [40, 49];
// DINERS_CLUB           36 || 38, [300, 305]
// DISCOVER CLUB         6
// JCB                   3

const int C_LENGTH_MAX = 16;                                    // Maximum length of credit card number

int c_num_to_array (long c_number, int *digits);
string get_name(int *digits, int c_length, int first_2, int first_3);
int check_luhn(int *digits, int c_length);

// Output name of credit card
int main(void)
{
    long c_number;					                             // Get positive number from user
    do
    {
        c_number = get_long("Number: ");
    }
    while (c_number < 1);
    int digits[C_LENGTH_MAX];
    int c_length = c_num_to_array (c_number, digits);            // Get length of c_number and convert c_number to array
    int first_2 = (10 * (digits[(c_length - 1)])) + digits[(c_length - 2)];
    int first_3 = (10 * (digits[(c_length - 1)])) + digits[(c_length - 2)] + digits[(c_length - 3)];
    string c_name = get_name(digits, c_length, first_2, first_3); // Check c_number for validity and produce credit card name
    printf("%s", c_name);
}

// Convert given card number to an array and produce card number's length
// Digits order in array is reversed relatively to card number
int c_num_to_array(long c_number, int *digits)
{
    int length_counter = 0;
    while (((c_number / 10) > 0) || ((c_number % 10) > 0))
    {
        *digits = (c_number % 10);                                // Put digit into current index in array
        c_number = (c_number / 10);
        length_counter++;
        digits++;                                                 // Increase pointer value to access the next index of array
    }
    return length_counter;
}

// Check credit card number for validity and produce corresponding credit card name
string get_name(int *digits, int c_length, int first_2, int first_3)
{
    int result_luhn = check_luhn(digits, c_length);
    if ((c_length == C_LENGTH_AMEX) &&
       ((first_2 == 34) || (first_2 == 37)) &&
       (result_luhn == 0))
    {
        return C_NAME_AMEX;
    }
    else if ((c_length == C_LENGTH_MASTC_OR_VISA) && ((first_3 == 222) ||
             ((first_2 >= 51) && (first_2 <= 55))) &&
             (result_luhn == 0))
    {
        return C_NAME_MASTERCARD;
    }
    else if (((c_length == C_LENGTH_VISA) || (c_length == C_LENGTH_MASTC_OR_VISA)) &&
            ((first_2 >= 40) && (first_2 <= 49)) &&
            (result_luhn == 0))
    {
        return C_NAME_VISA;
    }
    else if(((c_length == C_LENGTH_DINERSCLUB)) &&
            ((first_3 >= 300) && (first_3 <= 305)) && ((first_2 == 36) || (first_2 == 38)) &&
            (result_luhn == 0))
    {
        return C_NAME_DINERSCLUB;
    }
    else if ((c_length == C_LENGTH_DISCOVERCLUB) &&
             (first_2 == 60) && (result_luhn == 0))
    {
        return C_NAME_DISCOVERCLUB;
    }
    else if ((c_length == C_LENGTH_JCB) &&
             (first_2 == 35) && (result_luhn == 0))
    {
        return C_NAME_JCB;
    }
    else
    {
        return C_NAME_INVALID;
    }
}

// Produce modulo of card digits sum using Luhn's algorithm
int check_luhn(int *digits, int c_length)
{
    int sum_first = 0;
    int sum_mult_second = 0;
    int mult_num = 0;
    int num;
    for (int i = 0; i < c_length; i = i + 1)
    {
        num = *digits;                                       // Access to each item of array
        if ((i % 2) == 1)                                    // Sum of multiplication of every other digit, starting with the array's second digit
        {
            mult_num = 2 * num;
            if (mult_num > 9)                                // If mult_num consists of 2 digits, add those digits together
            {
                sum_mult_second += (mult_num % 10) + (mult_num / 10);
            }
            else
            {
                sum_mult_second += mult_num;
            }
        }
        else                                                 // Sum of every other digit, starting with the array's first digit
        {
            sum_first += num;
        }
        digits++;                                            // Increase pointer to provide access to the next item
    }
    int result_luhn = (sum_first + sum_mult_second) % 10;    // Find modulo of sum
    return result_luhn;
}
